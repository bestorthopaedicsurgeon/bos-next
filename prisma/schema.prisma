// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  password  String
  name      String
  firstName String?
  lastName  String?
  image     String?

  phone String?
  role  Role

  doctorProfileId Int?           @unique
  doctorProfile   DoctorProfile? @relation(fields: [doctorProfileId], references: [id])
  accounts        Account[]
  sessions        Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum Title {
  DR
  MR
  MS
  PROF
}

model DoctorProfile {
  id   Int   @id @default(autoincrement())
  user User?

  title                     String?
  experience                Int?
  designation               Designation?
  practiceName              String?
  clinicAddress             String?
  state                     String?
  practicePhone             String?
  subspecialities           Subspeciality[] @default([])
  about                     String?
  registrationsAssociations String?
  qualifications            String?
  awardsPublications        String?
  hospitalAffiliations      String?

  DoctorAvailability     DoctorAvailabilityTime[]
  DoctorAvailabilityDays String[]
}

enum Subspeciality {
  FOOT_AND_ANKLE
  PEDIATRIC_ORTHOPEDICS
  JOINT_REPLACEMENT
  SPINE_SURGERY
  HAND_SURGERY
  SHOULDER_AND_ELBOW
  SPORTS_MEDICINE
}

enum Designation {
  DOCTOR
  SURGEON
  GENERAL
}

model DoctorAvailabilityTime {
  id       Int           @id @default(autoincrement())
  doctor   DoctorProfile @relation(fields: [doctorId], references: [id])
  doctorId Int

  dayOfWeek  DayOfWeek
  startTime  String // format: "09:00"
  endTime    String // format: "12:30"
  location   LocationType
  clinicName String? // Only if location = CLINIC

  createdAt DateTime @default(now())
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum LocationType {
  ONLINE
  CLINIC
}
