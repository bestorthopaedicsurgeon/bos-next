generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?      @map("email_verified")
  password      String?
  name          String
  firstName     String?
  lastName      String?
  image         String?
  phone         String?
  role          Role
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  doctorProfile DoctorProfile? @relation("UserDoctorProfile")
  reviews       DoctorReview[]
  sessions      Session[]
}

model DoctorProfile {
  id                        Int                      @id @default(autoincrement())
  userId                    String?                  @unique
  title                     String?
  experience                Int?
  designation               Designation?
  about                     String?
  DoctorAvailabilityDays    String[]
  name                      String?
  practices                 Json?
  subspecialities           String[]                 @default([])
  registrationsAssociations String[]                 @default([])
  qualifications            String[]                 @default([])
  awardsPublications        String[]                 @default([])
  hospitalAffiliations      Json?
  featured                  Boolean                  @default(false)
  location                  String?
  registrationCompleted     Boolean                  @default(false)
  image                     String?
  DoctorAvailability        DoctorAvailabilityTime[]
  user                      User?                    @relation("UserDoctorProfile", fields: [userId], references: [id])
  reviews                   DoctorReview[]
}

model DoctorReview {
  id              Int           @id @default(autoincrement())
  professionalism Int
  punctuality     Int
  helpfulness     Int
  knowledge       Int
  review          String
  doctorId        Int
  userId          String
  createdAt       DateTime      @default(now())
  doctor          DoctorProfile @relation(fields: [doctorId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@unique([userId, doctorId])
}

model DoctorAvailabilityTime {
  id         Int           @id @default(autoincrement())
  doctorId   Int
  dayOfWeek  DayOfWeek
  startTime  String
  endTime    String
  location   LocationType
  clinicName String?
  createdAt  DateTime      @default(now())
  doctor     DoctorProfile @relation(fields: [doctorId], references: [id])
}

model Blog {
  id         String   @id @default(cuid())
  title      String
  authorName String
  date       DateTime @default(now())
  image      String?
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  slug       String   @unique
}

model ContactUs {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum Title {
  DR
  MR
  MSa
  PROF
}

enum Designation {
  DOCTOR
  SURGEON
  GENERAL
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum LocationType {
  ONLINE
  CLINIC
}
